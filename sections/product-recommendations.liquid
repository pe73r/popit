
 <div class="py-10 md:py-12 product-recommendations">
   <div class="">
     {% if section.settings.title != blank %}
        <h2 class="w-11/12 md:w-full mx-auto text-2xl leading-8 lg:text-3xl lg:leading-10 mb-8 text-center product-ingredients-title" style="color:{{ section.settings.color }}">{{ section.settings.title }}</h2>
     {% endif %}
      <product-recommendations class="product-recommendations isolate" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4">  
        <div class="flex lg:justify-center items-center relative overflow-hidden overflow-x-scroll snap-mandatory snap-x gap-4 lg:gap-6 scrollbar-none px-4">
          {% for recommendation in recommendations.products %}
              {% if section.settings.card-product == "inline" %}
                  {% render 'card-product-inline',
                  card_product: recommendation,
                  media_aspect_ratio: section.settings.image_ratio,
                  show_secondary_image: section.settings.show_secondary_image,
                  show_vendor: section.settings.show_vendor,
                  show_rating: section.settings.show_rating,
                  show_quick_add: true,
                  class: "min-w-[350px] max-w-[350px] xl:min-w-none card-product-inline"
                %} 
             {% else %}
                {% render 'card-product',
                    card_product: recommendation,
                    media_aspect_ratio: section.settings.image_ratio,
                    show_secondary_image: section.settings.show_secondary_image,
                    show_vendor: section.settings.show_vendor,
                    show_rating: section.settings.show_rating,
                    show_quick_add: true,
                    class: "min-w-[350px]  max-w-[350px] xl:min-w-none card-product-inline"
                  %} 
              {% endif %}   
          {% endfor %}
       </div>
    </product-recommendations>
  </div>
 </section>
 <style>

 .card-product-inline{
  max-width: 350px;
 } 
 
  {% if product.tags contains "sommeil" %}
    .product-recommendations {
      background-color: #4F2674;
    }
  {% elsif product.tags contains "energie" %}
    .product-recommendations {
      background-color: #EA5B0C;
    }
  {% elsif product.tags contains "alimentation" %}
    .product-recommendations {
      background-color: #D7E6AF;
    }
  {% elsif product.tags contains "sport" %}
    .product-recommendations {
      background-color: #CBE7E6;
    }
  {% elsif product.tags contains "stress" %}
    .product-recommendations {
      background-color: #2D286E;
    }
  {% elsif product.tags contains "feminin" %}
    .product-recommendations {
      background-color: #FACDDC;
    }
  {% elsif product.tags contains "focus" %}
    .product-recommendations {
      background-color: #C3E6DC;
    }
  {% elsif product.tags contains "hair" or product.tags contains "peau" or product.tags contains "beaute" %}
    .product-recommendations {
      background-color: #E4003A;
    }
  {% else %}
    .product-recommendations {
      background-color: {{ section.settings.bg_color }}
      ;
    }
  {% endif %}
</style>

{% javascript %}
  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();

      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);

        fetch(this.dataset.url)
          .then(response => response.text())
          .then(text => {
            const html = document.createElement('div');
            html.innerHTML = text;
            const recommendations = html.querySelector('product-recommendations');

            if (recommendations && recommendations.innerHTML.trim().length) {
              this.innerHTML = recommendations.innerHTML;
            }

            if (html.querySelector('.grid__item')) {
              this.classList.add('product-recommendations--loaded');
            }
          })
          .catch(e => {
            console.error(e);
          });
      }

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}

{% schema %}
{
  "name": "Recommendations",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "select",
      "id": "card-product",
      "options": [
        {
          "value": "inline",
          "label": "inline"
        },
        {
          "value": "default",
          "label": "default"
        }
      ],
      "default": "inline",
      "label": "Card product style"
    },
    {
      "type": "text",
      "id": "title",
      "default": "Compl√®tez votre routine",
      "label": "Heading"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": true,
      "label": "Show second image on hover"
    },
    {
          "type": "header",
          "content": "colors"
      },
      {
        "type": "color",
        "id": "bg_color",
        "label": "Background color",
        "default": "#D7E6AF"
      },
      {
            "type": "color",
            "id": "color",
            "label": "Text color",
            "default": "#4B9B7D"
      }
  ]
}
{% endschema %}
